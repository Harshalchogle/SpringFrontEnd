*****for Sorting and searching in Spring Methods******
1)For Sorting of prducts by price asc or desc. (BackEnd)
	i)create method of highToLow or LowToHigh in interfaceDAO.
		public List<Products> displayProductsLowToHigh();
		public List<Products> displayProductsHighToLow();
	ii)Implement this two methods in DAO implementation class.
		@Override
		public List<Products> displayProductsLowToHigh() 
		{
		return sessionfactory.getCurrentSession().createQuery("from com.niit.model.Products order by price 			asc").getResultList();
		}

		@Override
		public List<Products> displayProductsHighToLow() {
		return sessionfactory.getCurrentSession().createQuery("from com.niit.model.Products order by price 		desc").getResultList();
		}

	iii)create method of highToLow or LowToHigh in interface serviceDAO.
		public List<Products> displayProductsLowToHigh();
		public List<Products> displayProductsHighToLow();

	iv)Implement this two methods in DAO implementation class.
		@Override
		public List<Products> displayProductsLowToHigh() {
		return productDAO.displayProductsLowToHigh();
		}

		@Override
		public List<Products> displayProductsHighToLow() {
		return productDAO.displayProductsHighToLow();
		}
2)Steps Doing in FrontEnd
create two links for high to low and low to high in header()
	<li class="nav-item">
      	<a class="btn btn-primary" href="${pageContext.request.contextPath}/products/LowToHigh">Low To High</a>
      	</li>
      	<li class="nav-item">
      	<a class="btn btn-primary" href="${pageContext.request.contextPath}/products/HighToLow">High To Low</a>
     	 </li>

3)create two methods for high to low and low to high in controller.
	@RequestMapping("/LowToHigh")
	public String displayProductLowToHigh(ModelMap map)
	{
		List<Products> products=new ArrayList<Products>();
		for (Products p:productDAO.displayProductsLowToHigh()) 
		{
			List<String> im=displayImage(p.getProductname());
			if(!im.isEmpty())
			p.setProductimage(im.get(0));	
			products.add(p);
		}
		map.addAttribute("products",products);
		return "index";
	}
	@RequestMapping("/HighToLow")
	public String displayProductHighToLow(ModelMap map)
	{
		List<Products> products=new ArrayList<Products>();
		for (Products p : productDAO.displayProductsHighToLow()) 
		{
			List<String> im=displayImage(p.getProductname());
			if(!im.isEmpty())
			p.setProductimage(im.get(0));
			products.add(p);
		}
		map.addAttribute("products", products);
		return "index";
	}

finally check the output.


2)****For implementing Searching technique*****
	i)create method for search in interface.
		public List<Products> search(String productname);
	
	ii)implement this method in implementaion class.
		@Override
	public List<Products> search(String productname) {
		Session session=sessionfactory.getCurrentSession();
		Query query=session.createQuery("from com.niit.model.Products where productname like:prname");
		return query.setParameter("prname", "%"+productname+"%").getResultList();
		
		}

	iii)create method for search in Serviceinterface.
		public List<Products> search(String productname);

	iv)implement this mehod in service implementation class.
		@Override
		public List<Products> search(String productname) {
		return productDAO.search(productname);
		}

2)Steps doing in FrontEnd
NOTE :- for using Spring tags you have to use .
<%@taglib prefix="sf" uri="http://www.springframework.org/tags"%>

	i)create form for seach in header.
		<form class="form-inline my-2 my-lg-0" action='<sf:url value="/products/search"></sf:url>'>
      		<input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" 				name="search">
      		<button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    		</form>
	ii)create method for search in controller.
		@RequestMapping("/search")
		public String search(@RequestParam("search")String productname,ModelMap map)
		{
		List<Products> products=new ArrayList<Products>();
		for (Products p : productDAO.search(productname)) 
		{
			List<String> im=displayImage(p.getProductname());
			if(!im.isEmpty())
			p.setProductimage(im.get(0));
			products.add(p);
		}
		map.addAttribute("products", products);
		return "index";
		}
	iii)Test the output.
		

	

