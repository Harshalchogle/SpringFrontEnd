steps for add,update,delete,display and displayByProductId of products.
********************STEPS FOR HIBERNATE****************************
-------------------------------------------------------------------------------
1)ADD(BackEnd)
	i)create add method in interface.
		public boolean addProduct(Products products);
	
	ii)implement this method in implementation class.
		@Override
		public boolean addProduct(Products products) {
		sessionfactory.getCurrentSession().save(products);
		return true;
		}
	iii)Create add method in serviceInterface
		public boolean addProduct(Products products);
		
	iv)implement this method in service implement class.
		@Override
		public boolean addProduct(Products products) {
		productDAO.addProduct(products);
		return true;
		}
	v)Test the add method in test class.
		@Test
		@Ignore//
		public void addProduct()
		{
		products.setProductname("Samosa");
		products.setPrice(10);
		products.setQuantity(10);
		assertEquals(true, productDAO.addProduct(products));
		}
	
2)Update(BackEnd)
	i)create update method in interface.
		public boolean updateProduct(Products products);
		
	ii)implement this method in implementation class.
		@override
		public boolean updateProduct(Products products) {
		sessionfactory.getCurrentSession().update(products);
		return true;
		}
		
	iii)Create update method in serviceInterface
			public boolean updateProduct(Products products);
			
	iv)implement this method in service implement class.
			public boolean updateProduct(Products products) {
			productDAO.updateProduct(products);
			return true;
			}
			
	v)Test the update method in test class.
		@Test
		@Ignore//
		public void updateProduct()
		{
		products.setProductname("Samosa");
		products.setPrice(10);
		products.setQuantity(10);
		assertEquals(true, productDAO.updateProduct(products));
		}
		
3)Delete(BackEnd)
	i)create delete method in interface.
		public boolean deleteProduct(int productid);
		
	ii)implement this method in implementation class.
		public boolean deleteProduct(int productid) {
		Products pr=new Products();
		pr.setProductid(productid);
		sessionfactory.getCurrentSession().delete(pr);
		return true;
		}
		
	iii)Create delete method in serviceInterface.
			public boolean deleteProduct(int productid);
			
	iv)implement this method in service implement class.
		public boolean deleteProduct(int productid) {
		productDAO.deleteProduct(productid);
		return true;
		}
		
	v)Test the delete method in test class.
		@Test
		@Ignore//
		public void deleteProduct()
		{
		assertEquals(true, productDAO.deleteProduct(1));//Enter productid
		}
		
4)Display(BackEnd)
	i)create display method in interface.
		public List<Products> displayAllProducts();
		
	ii)implement this method in implementation class.
		@Override
		public List<Products> displayAllProducts() {
			return sessionfactory.getCurrentSession().createQuery("from com.niit.model.Products").getResultList();
		}
		
	iii)Create display method in serviceInterface.
			public List<Products> displayAllProducts();
			
	iv)implement this method in service implement class.
			@Override
		public List<Products> displayAllProducts() {
			return productDAO.displayAllProducts();
		}
		
	v)Test the display method in test class.
		@Test
		@Ignore//
		public void displayProduct()
		{
		assertEquals(true, productDAO.displayProduct());
		}
		
5)Display Product By Id
	i)create displayproductbyid method in interface.
		public Products displayProductsById(int productid);
		
	ii)implement this method in implementation class.
		@Override
		public Products displayProductsById(int productid) {
			Session session=sessionfactory.getCurrentSession();
			Query query=session.createQuery("from com.niit.model.Products where productid=:productid");
			return (Products) query.setParameter("productid",productid).getResultList().get(0);
		}
		
	iii)Create display method in serviceInterface.
			public Products displayProductsById(int productid);
			
	iv)implement this method in service implement class.
				@Override
			public Products displayProductsById(int productid) {
				return productDAO.displayProductsById(productid);
	}
		
	v)Test the display method in test class.
		@Test
		@Ignore//
		public void displayProduct()
		{
		assertEquals(true, productDAO.displayProductById(1));
		}
		
*****************STEPS FOR SPRING FRONTEND.************************************
NOTE:For spring form tag you have to used.
	<%@taglib prefix="sp" uri="http://www.springframework.org/tags/form" %>
1)ADD
	i)create link of add products in header.
		<li class="nav-item">
        <a class="nav-link" href="${pageContext.request.contextPath}/products/add">Add Products</a>
		</li>
		
	ii)Create form for add product.
		<jsp:include page="header.jsp"/>
		<div class="container">
		<c:if test="${p==null}">
		<sp:form action="${pageContext.request.contextPath}/products/add" modelAttribute="products" method="post"  enctype="multipart/form-data">
		<h1>Add Product</h1>
		<div class="form-group">
		<label>Enter Productname</label>
		<sp:input path="productname" cssClass="form-control"/>
		</div>
		<div class="form-group">
		<label>Enter price</label>
		<sp:input path="price" cssClass="form-control"/>
		</div>
		<div class="form-group">
		<label>Enter quantity</label>
		<sp:input path="quantity" cssClass="form-control"/>
		</div>
		<div class="form-group">
		<label>Add Product Photo</label>
		<input type="file" name="productPhoto" accept="imgae/*">
		</div>
		<input type="submit" value="Add Product" class="btn btn-success">
		<input type="reset" value="Reset" class="btn btn-danger">
		</sp:form>
		</c:if>
	
	iii)create method for add in product controller. this is for blank container. just to display addProduct page.
	`	@RequestMapping("/add")
		public String addProducts(ModelMap map)
		{
			map.addAttribute("products", new Products());
			return "AddProduct";
		}
		
	iv)Create same method for add in product controller. this is used as form.
		@PostMapping("/add")
		public String addProductcmplt(@ModelAttribute("products")Products products,//This is for the photo@RequestParam("productPhoto")MultipartFile productPhoto//,ModelMap map)
		{
			productDAO.addProduct(products);
			return "redirect:/";
		}

2)Update
	i)create link of update product in index.
		<a href="${pageContext.request.contextPath}/products/edit?productid=${product.productid}" class="btn btn-primary">Edit</a>
		
	ii)Create form for edit product.	
		<c:if test="${p!=null}">
		<sp:form action="${pageContext.request.contextPath}/products/update" modelAttribute="p" method="post"  enctype="multipart/form-data">
		<h1>update Product</h1>
		<div class="form-group">
		<sp:hidden path="productid" cssClass="form-control"/>
		</div>
		<div class="form-group">
		<label>Enter Productname</label>
		<sp:input path="productname" cssClass="form-control"/>
		</div>
		<div class="form-group">
		<label>Enter price</label>
		<sp:input path="price" cssClass="form-control"/>
		</div>
		<div class="form-group">
		<label>Enter quantity</label>
		<sp:input path="quantity" cssClass="form-control"/>
		</div>
		<div class="form-group">
		<label>Add Product Photo</label>
		<input type="file" name="productPhoto" accept="imgae/*">
		</div>
		<input type="submit" value="Update Product" class="btn btn-success">
		<input type="reset" value="Reset" class="btn btn-danger">
		</sp:form>
		</c:if>
	
	iii)Create method for edit in controller.
		@RequestMapping("/edit")
		public String displayProductById(@RequestParam("productid")int productid,ModelMap map)
		{
			map.addAttribute("p",productDAO.displayProductsById(productid));
			return "AddProduct";
		}
	
	iv)crate same method for updateProduct in controller.
		@PostMapping("/update")
		public String updateProducts(ModelMap map,@ModelAttribute("p")Products products,//This is for the photo@RequestParam("productPhoto")MultipartFile productPhoto//)
		{
			productDAO.updateProduct(products);
			return "redirect:/";
		}
		
3)Delete
	i)Create link of delte product in index.
		<a href="${pageContext.request.contextPath}/products/delete?productid=${product.productid}" class="btn btn-danger">Delete</a>
	
	ii)Create method for deleteProduct in controller.
		@RequestMapping("/delete")
		public String deleteProduct(ModelMap map,@RequestParam("productid")int productid)
		{
			productDAO.deleteProduct(productid);
			return "redirect:/";
		}
		
4)Display
	i)Display page needs to be created on index page or another displayProduct page.
		<jsp:include page="header.jsp"/>
		<h1>All Products</h1>
		<table class="table">
		<tr>
		<td>Productid</td>
		<td>Product Name</td>
		<td>Price</td>
		<td>Quantity</td>
		<td>Photo</td>
		</tr>
		<c:forEach items="${products}" var="product">
		<tr>
		<td>${product.productid}</td>
		<td>${product.productname}</td>
		<td>${product.price}</td>
		<td>${product.quantity}</td>
		<td><img src='<sf:url value="/images/${product.productname}/${product.productimage}"></sf:url>' height="5%" width="5%"></td>
		<td><sec:authorize access="hasAuthority('admin') and isAuthenticated()"><a href="${pageContext.request.contextPath}/products/edit?productid=${product.productid}" class="btn btn-primary">Edit</a>|
		<a href="${pageContext.request.contextPath}/products/delete?productid=${product.productid}" class="btn btn-danger">Delete</a>|</sec:authorize>
		<a href="${pageContext.request.contextPath}/products/buy?productid=${product.productid}" class="btn btn-warning">Buy Now</a>
		</td>
		</tr>
		</c:forEach>
		</table>
		
	ii)Create method for displayAllProducts in  indexcontroller.
		@RequestMapping(value = {"","/","home"})
		public String index(ModelMap map)
		{
		map.addAttribute("products",productDAO.displayAllProducts());
		return "index";
		}