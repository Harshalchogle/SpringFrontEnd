**************Login Steps in hibernate and Spring*****************
************HIBERNATE STEPS*******************
1)Add authority and Status field in model.
	String authority;
	boolean status;
	And also set their getters and setters.
	
2)Create userdetailservice impl in service impl class.
		package com.niit.ServiceDAOImpl;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.security.core.userdetails.UsernameNotFoundException;
		import org.springframework.stereotype.Service;
		import org.springframework.security.core.userdetails.User.UserBuilder;
		import org.springframework.security.core.userdetails.UserDetails;
		import org.springframework.security.core.userdetails.UserDetailsService;
		import org.springframework.transaction.annotation.Transactional;

		import com.niit.ServiceDAO.UserServiceDAO;
		import com.niit.model.User;

		@Service("userDetailsService")
		public class UserDetailsServerIMp implements UserDetailsService
		{
		@Autowired
		UserServiceDAO userDAO;

		@Transactional(readOnly = true)
		public org.springframework.security.core.userdetails.UserDetails loadUserByUsername(String username) throws UsernameNotFoundException 
		{
			User user1 = userDAO.displayUserByUsername(username);
			UserBuilder builder = null;
			if (user1 != null) 
			{
			  builder = org.springframework.security.core.userdetails.User.withUsername(username);
			  builder.disabled(!user1.isStatus());
			  builder.password(user1.getPassword());
			  String[] authorities = new String[]{user1.getAuthority()} ;

			  builder.authorities(authorities);
			} else {
			  throw new UsernameNotFoundException("User not found.");
			}
			return builder.build();
		  }
		}
		
********************Steps in Spring*****************
NOTE: 1)You have to add security repositories from mvnrepository or your existing projects.
	  2)You have to add password bcrypt for the login.
1)Create AppContext class in config package.
	copy the appCotext class code from the govind sir github or your existing projects.
	
2)Create SecurityWebApplicationInitializer class in the config package.
	copy the SecurityWebApplicationInitializer class code from the govind sir github or your existing projects.

3)Create WebAppInitializer class in config package.
	copy the WebAppInitializer class code from the govind sir github or your existing projects.	

4)Create WebSecurityConfig class in the config package.
	i)copy the WebSecurityConfig class code from the govind sir github or your existing projects.
	ii)set login page name as your requestmapping name.
	iii)set default success url to your homepage or any page that you wants after successful login action.
	
5)Create Login form in views.
	<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@taglib prefix="sf" uri="http://www.springframework.org/tags"%>
    <%@page isELIgnored="false" %>
	<!DOCTYPE html>
	<html>
	<head>
	<meta charset="ISO-8859-1">
	<title>Insert title here</title>
	</head>
	<body>
	<jsp:include page="header.jsp"/>
	<div class="container">
	<form action='<sf:url value="/loginaction"></sf:url>' method="post">
	<h1>Login Form</h1>
	<div class="form-group">
	<label>Enter Username</label>
	<input type="text" name="username" class="form-control">
	</div>
	<div class="form-group">
	<label>Enter Password</label>
	<input type="password" name="password" class="form-control">
	</div>
	<a href="${pageContext.request.contextPath}/users/username">Forget Password?</a><br>
	<input type="submit" value="Login" class="btn btn-primary">
	<input type="reset" value="Reset" class="btn btn-danger">
	</form>
	</div>
	</body>
	</html>
	
5)Create method for login in user controller.
	@RequestMapping("/login")
	public String login()
	{
		return "Login";
	}
	